<?xml version="1.0" encoding="ISO-8859-1"?>
<!DOCTYPE html>

<html 
	xmlns="http://www.w3.org/1999/xhtml"
	xmlns:h="http://java.sun.com/jsf/html"
    xmlns:p="http://primefaces.org/ui"
	>
<body onload="getLocation();">
	<form>
		<p id="demo"></p>
		<label for="latitude">Latitude: </label> 
		<h:outputText id="latitude" value="#{localizacaoMB.localizacao.latitude}" /> <br/>

		<label for="longitude">Longitude: </label> 
	    <h:outputText id="longitude" value="#{localizacaoMB.localizacao.longitude}" /> <br/>

		<div id="mapholder" style="height: 500px; width: 700px"></div>

		<script src="resources/js/jquery-1.11.1.js"></script>
		<!-- Maps API Javascript -->
		<script src="http://maps.googleapis.com/maps/api/js?sensor=false"></script>

<script>
var x = document.getElementById("demo");

function getLocation() {
	if (navigator.geolocation) {
		navigator.geolocation.getCurrentPosition(showPosition, showError);
	} else {
		x.innerHTML = "Geolocalização não é suportada nesse browser.";
	}
}

function showPosition(position) {

	lat = position.coords.latitude;
	lon = position.coords.longitude;

	if (lat == null) {
		lat = 0;
	}
	if (lon == null) {
		lon = 0;
	}
	document.getElementById('latitude').innerHTML = lat;
	document.getElementById('longitude').innerHTML = lon;

	latlon = new google.maps.LatLng(lat, lon);
	
	var directionsService 
		= new google.maps.DirectionsService({
			//avoidHighways: true
		});

	
	var directionsDisplay 
		= new google.maps.DirectionsRenderer({
			suppressMarkers: true,
			suppressInfoWindows: true
		}); 

	var options = {
		zoom: 5,
		center: latlon,
		mapTypeId: google.maps.MapTypeId.ROADMAP
	};

	var map = new google.maps.Map(document.getElementById("mapholder"), options);

	directionsDisplay.setMap(map); // Relacionamos o directionsDisplay com o mapa desejado

	/*
	var request = { // Novo objeto google.maps.DirectionsRequest, contendo:
	origin: enderecoPartida, // origem
	destination: enderecoChegada, // destino
	travelMode: google.maps.TravelMode.DRIVING // meio de transporte, nesse caso, de carro
	};
	*/

	var parsedJSON = $.parseJSON('#{caminhoUsuarioMB.getCaminhoUsuario(2)}');

	var origin, destination, usuario;
	var waypoints = [];
	var markerArray = [];

	for (var i in parsedJSON) {
		var latLngLocal = new google.maps.LatLng(parsedJSON[i].latitude, parsedJSON[i].longitude);

		// Marcador com algum detalhe esses pontos
		var marker = new google.maps.Marker({
			position: latLngLocal,
			draggable: true,
			icon: parsedJSON[i].icone,
			map: map
		});

		google.maps.event.addListener(marker, 'click', (function(marker, i) {
			return function() {
				alert("Cliquei");
				infowindow.setContent(usuario);
				infowindow.open(map, marker);
			}
		})(marker, i));

		// Salvar os dados para criar a rota
		if (i == 0) {
			destination = latLngLocal;
			usuario = parsedJSON[i].usuario;
		} else {
			waypoints.push({
				location: latLngLocal
			});
			origin = latLngLocal;
		}
	}

	//Apos o for, remover o ultimo elemento do array, pois ele e o ponto de origem.
	waypoints.pop();

	var request = {
		origin: origin,
		destination: destination,
		waypoints: waypoints,
		//travelMode: google.maps.TravelMode.DRIVING // indica rotas de trânsito padrão usando a rede rodoviária.
		travelMode: google.maps.TravelMode.WALKING // solicita rotas a pé por faixas de pedestre e calçadas.
	};

	directionsService.route(request, function(result, status) {
		if (status == google.maps.DirectionsStatus.OK) { // Se deu tudo certo
			directionsDisplay.setDirections(result); // Renderizamos no mapa o resultado
			//showSteps(result, usuario);
		} else {
			alert("Problema ao carregar a rota, status: "+status);
		}
	});

	/*function showSteps(directionResult, usuario) {
		// For each step, place a marker, and add the text to the marker's
		// info window. Also attach the marker to an array so we
		// can keep track of it and remove it when calculating new
		// routes.
		var myRoute = directionResult.routes[0].legs[0];

		for (var i = 0; i &lt; myRoute.steps.length; i++) {
			var marker = new google.maps.Marker({
				position: myRoute.steps[i].start_point,
				map: map
			});
			attachInstructionText(marker, usuario + " -> " + myRoute.steps[i].instructions);
			markerArray[i] = marker;
		}
	}

	function attachInstructionText(marker, text) {
		google.maps.event.addListener(marker, 'click', function() {
			stepDisplay.setContent(text);
			stepDisplay.open(map, marker);
		});
	} */

	// Tipos de overlays
	// Marker - Single locations on a map. Markers can also display custom icon
	// images
	// Polyline - Series of straight lines on a map
	// Polygon - Series of straight lines on a map, and the shape is "closed"
	// Circle and Rectangle
	// Info Windows - Displays content within a popup balloon on top of a map
	// Custom overlays
}

function showError(error) {
	switch (error.code) {
		case error.PERMISSION_DENIED:
			x.innerHTML = "Usuário rejeitou a solicitação de Geolocalização."
			break;
		case error.POSITION_UNAVAILABLE:
			x.innerHTML = "Localização indisponível."
			break;
		case error.TIMEOUT:
			x.innerHTML = "O tempo da requisição expirou."
			break;
		case error.UNKNOWN_ERROR:
			x.innerHTML = "Algum erro desconhecido aconteceu."
			break;
	}
}
</script>
	</form>
</body>
</html>